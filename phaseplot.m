clear;
format long
global a00 b00
tic
tspan1=0:0.01:2000; 
 a00=0.1;    
 b00=0.1;

Y1=[1,1,0.1];
[t,y]=odeRK4(@Robot_frac,tspan1,Y1);
toc;

figure(1)
subplot(2,2,1)
plot3(y(1000:end,2), y(1000:end,1), y(1000:end,3),'r'); hold on
xlabel('$x_2$','Interpreter','latex');ylabel('$x_1$','Interpreter','latex'); zlabel('$x_3$','Interpreter','latex'); 
subplot(2,2,2)
plot(y(1000:end,1), y(1000:end,2),'r'); xlabel('$x_1$','Interpreter','latex');ylabel('$x_2$','Interpreter','latex');
subplot(2,2,3)
plot(y(1000:end,2), y(1000:end,3),'r'); xlabel('$x_2$','Interpreter','latex');ylabel('$x_3$','Interpreter','latex');
subplot(2,2,4)
plot(y(1000:end,3), y(1000:end,1),'r'); xlabel('$x_3$','Interpreter','latex');ylabel('$x_1$','Interpreter','latex');
grid on
set(gca,'TickLabelInterpreter','latex');

function dy=Robot_frac(~,X)
global a00 b00
x1 = X(1); x2 = X(2); x3 = X(3);
dy1=(2*x2*x3*(x2^2 - x3^2)*(4*x1^3*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^3 + b00*x1^2 - b00*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 + 2*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^5 + 2*x1^5*(4*x2^2*x3^2 - (x2^2 - x3^2)^2) - 2*a00*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2))*(3*x1^3*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^4 + 3*x1^5*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 - a00*x1^3 + b00*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^3 + x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^6 + x1^7 + 3*a00*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 - 3*b00*x1^2*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)))/((x1^2 + (4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2)^2*(4*x1^2*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^6 + 6*x1^4*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^4 + 4*x1^6*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 - 2*a00*x1^4 - 2*a00*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^4 + a00^2 + b00^2 + x1^8 + (4*x2^2*x3^2 - (x2^2 - x3^2)^2)^8 + 8*b00*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^3 - 8*b00*x1^3*(4*x2^2*x3^2 - (x2^2 - x3^2)^2) + 12*a00*x1^2*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2)) - ((3*x1^2*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^5 + 3*x1^4*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^3 - b00*x1^3 - a00*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^3 + x1^6*(4*x2^2*x3^2 - (x2^2 - x3^2)^2) + (4*x2^2*x3^2 - (x2^2 - x3^2)^2)^7 + 3*a00*x1^2*(4*x2^2*x3^2 - (x2^2 - x3^2)^2) + 3*b00*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2)*(x1^2*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^4 + 4*x1^3*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^3 - x1^4*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 - a00*x1^2 + b00*x1^2 + a00*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 - b00*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 + 2*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^5 + 2*x1^5*(4*x2^2*x3^2 - (x2^2 - x3^2)^2) - x1^6 + (4*x2^2*x3^2 - (x2^2 - x3^2)^2)^6 - 2*a00*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2) - 2*b00*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)))/(2*(x1^2 + (4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2)^2*(4*x1^2*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^6 + 6*x1^4*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^4 + 4*x1^6*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 - 2*a00*x1^4 - 2*a00*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^4 + a00^2 + b00^2 + x1^8 + (4*x2^2*x3^2 - (x2^2 - x3^2)^2)^8 + 8*b00*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^3 - 8*b00*x1^3*(4*x2^2*x3^2 - (x2^2 - x3^2)^2) + 12*a00*x1^2*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2));
dy2=(x2*(((((3*x1^3*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^4 + 3*x1^5*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 - a00*x1^3 + b00*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^3 + x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^6 + x1^7 + 3*a00*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 - 3*b00*x1^2*(4*x2^2*x3^2 - (x2^2 - x3^2)^2))*(x1^2*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^4 + 4*x1^3*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^3 - x1^4*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 - a00*x1^2 + b00*x1^2 + a00*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 - b00*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 + 2*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^5 + 2*x1^5*(4*x2^2*x3^2 - (x2^2 - x3^2)^2) - x1^6 + (4*x2^2*x3^2 - (x2^2 - x3^2)^2)^6 - 2*a00*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2) - 2*b00*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)))/(2*(x1^2 + (4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2)^2*(4*x1^2*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^6 + 6*x1^4*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^4 + 4*x1^6*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 - 2*a00*x1^4 - 2*a00*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^4 + a00^2 + b00^2 + x1^8 + (4*x2^2*x3^2 - (x2^2 - x3^2)^2)^8 + 8*b00*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^3 - 8*b00*x1^3*(4*x2^2*x3^2 - (x2^2 - x3^2)^2) + 12*a00*x1^2*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2)) + (2*x2*x3*(x2^2 - x3^2)*(4*x1^3*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^3 + b00*x1^2 - b00*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 + 2*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^5 + 2*x1^5*(4*x2^2*x3^2 - (x2^2 - x3^2)^2) - 2*a00*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2))*(3*x1^2*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^5 + 3*x1^4*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^3 - b00*x1^3 - a00*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^3 + x1^6*(4*x2^2*x3^2 - (x2^2 - x3^2)^2) + (4*x2^2*x3^2 - (x2^2 - x3^2)^2)^7 + 3*a00*x1^2*(4*x2^2*x3^2 - (x2^2 - x3^2)^2) + 3*b00*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2))/((x1^2 + (4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2)^2*(4*x1^2*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^6 + 6*x1^4*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^4 + 4*x1^6*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 - 2*a00*x1^4 - 2*a00*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^4 + a00^2 + b00^2 + x1^8 + (4*x2^2*x3^2 - (x2^2 - x3^2)^2)^8 + 8*b00*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^3 - 8*b00*x1^3*(4*x2^2*x3^2 - (x2^2 - x3^2)^2) + 12*a00*x1^2*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2)))*(x2^2 - x3^2))/(2*(4*x2^2*x3^2 + (x2^2 - x3^2)^2)) - (x2*x3*(((4*x1^3*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^3 + b00*x1^2 - b00*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 + 2*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^5 + 2*x1^5*(4*x2^2*x3^2 - (x2^2 - x3^2)^2) - 2*a00*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2))*(x1^4*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 - x1^2*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^4 + a00*x1^2 - a00*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 + x1^6 - (4*x2^2*x3^2 - (x2^2 - x3^2)^2)^6 + 2*b00*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)))/(x1^2 + (4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2)^4 - 1))/(4*x2^2*x3^2 + (x2^2 - x3^2)^2)))/(2*(x2^2 + x3^2)) - (x3*(((((4*x1^3*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^3 + b00*x1^2 - b00*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 + 2*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^5 + 2*x1^5*(4*x2^2*x3^2 - (x2^2 - x3^2)^2) - 2*a00*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2))*(x1^4*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 - x1^2*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^4 + a00*x1^2 - a00*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 + x1^6 - (4*x2^2*x3^2 - (x2^2 - x3^2)^2)^6 + 2*b00*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)))/(x1^2 + (4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2)^4 - 1)*(x2^2 - x3^2))/(2*(4*x2^2*x3^2 + (x2^2 - x3^2)^2)) + (x2*x3*(((3*x1^3*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^4 + 3*x1^5*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 - a00*x1^3 + b00*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^3 + x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^6 + x1^7 + 3*a00*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 - 3*b00*x1^2*(4*x2^2*x3^2 - (x2^2 - x3^2)^2))*(x1^2*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^4 + 4*x1^3*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^3 - x1^4*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 - a00*x1^2 + b00*x1^2 + a00*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 - b00*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 + 2*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^5 + 2*x1^5*(4*x2^2*x3^2 - (x2^2 - x3^2)^2) - x1^6 + (4*x2^2*x3^2 - (x2^2 - x3^2)^2)^6 - 2*a00*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2) - 2*b00*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)))/(2*(x1^2 + (4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2)^2*(4*x1^2*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^6 + 6*x1^4*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^4 + 4*x1^6*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 - 2*a00*x1^4 - 2*a00*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^4 + a00^2 + b00^2 + x1^8 + (4*x2^2*x3^2 - (x2^2 - x3^2)^2)^8 + 8*b00*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^3 - 8*b00*x1^3*(4*x2^2*x3^2 - (x2^2 - x3^2)^2) + 12*a00*x1^2*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2)) + (2*x2*x3*(x2^2 - x3^2)*(4*x1^3*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^3 + b00*x1^2 - b00*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 + 2*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^5 + 2*x1^5*(4*x2^2*x3^2 - (x2^2 - x3^2)^2) - 2*a00*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2))*(3*x1^2*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^5 + 3*x1^4*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^3 - b00*x1^3 - a00*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^3 + x1^6*(4*x2^2*x3^2 - (x2^2 - x3^2)^2) + (4*x2^2*x3^2 - (x2^2 - x3^2)^2)^7 + 3*a00*x1^2*(4*x2^2*x3^2 - (x2^2 - x3^2)^2) + 3*b00*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2))/((x1^2 + (4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2)^2*(4*x1^2*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^6 + 6*x1^4*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^4 + 4*x1^6*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 - 2*a00*x1^4 - 2*a00*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^4 + a00^2 + b00^2 + x1^8 + (4*x2^2*x3^2 - (x2^2 - x3^2)^2)^8 + 8*b00*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^3 - 8*b00*x1^3*(4*x2^2*x3^2 - (x2^2 - x3^2)^2) + 12*a00*x1^2*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2))))/(4*x2^2*x3^2 + (x2^2 - x3^2)^2)))/(2*(x2^2 + x3^2));
dy3=- (x2*(((((4*x1^3*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^3 + b00*x1^2 - b00*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 + 2*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^5 + 2*x1^5*(4*x2^2*x3^2 - (x2^2 - x3^2)^2) - 2*a00*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2))*(x1^4*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 - x1^2*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^4 + a00*x1^2 - a00*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 + x1^6 - (4*x2^2*x3^2 - (x2^2 - x3^2)^2)^6 + 2*b00*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)))/(x1^2 + (4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2)^4 - 1)*(x2^2 - x3^2))/(2*(4*x2^2*x3^2 + (x2^2 - x3^2)^2)) + (x2*x3*(((3*x1^3*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^4 + 3*x1^5*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 - a00*x1^3 + b00*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^3 + x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^6 + x1^7 + 3*a00*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 - 3*b00*x1^2*(4*x2^2*x3^2 - (x2^2 - x3^2)^2))*(x1^2*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^4 + 4*x1^3*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^3 - x1^4*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 - a00*x1^2 + b00*x1^2 + a00*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 - b00*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 + 2*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^5 + 2*x1^5*(4*x2^2*x3^2 - (x2^2 - x3^2)^2) - x1^6 + (4*x2^2*x3^2 - (x2^2 - x3^2)^2)^6 - 2*a00*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2) - 2*b00*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)))/(2*(x1^2 + (4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2)^2*(4*x1^2*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^6 + 6*x1^4*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^4 + 4*x1^6*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 - 2*a00*x1^4 - 2*a00*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^4 + a00^2 + b00^2 + x1^8 + (4*x2^2*x3^2 - (x2^2 - x3^2)^2)^8 + 8*b00*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^3 - 8*b00*x1^3*(4*x2^2*x3^2 - (x2^2 - x3^2)^2) + 12*a00*x1^2*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2)) + (2*x2*x3*(x2^2 - x3^2)*(4*x1^3*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^3 + b00*x1^2 - b00*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 + 2*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^5 + 2*x1^5*(4*x2^2*x3^2 - (x2^2 - x3^2)^2) - 2*a00*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2))*(3*x1^2*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^5 + 3*x1^4*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^3 - b00*x1^3 - a00*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^3 + x1^6*(4*x2^2*x3^2 - (x2^2 - x3^2)^2) + (4*x2^2*x3^2 - (x2^2 - x3^2)^2)^7 + 3*a00*x1^2*(4*x2^2*x3^2 - (x2^2 - x3^2)^2) + 3*b00*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2))/((x1^2 + (4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2)^2*(4*x1^2*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^6 + 6*x1^4*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^4 + 4*x1^6*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 - 2*a00*x1^4 - 2*a00*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^4 + a00^2 + b00^2 + x1^8 + (4*x2^2*x3^2 - (x2^2 - x3^2)^2)^8 + 8*b00*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^3 - 8*b00*x1^3*(4*x2^2*x3^2 - (x2^2 - x3^2)^2) + 12*a00*x1^2*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2))))/(4*x2^2*x3^2 + (x2^2 - x3^2)^2)))/(2*(x2^2 + x3^2)) - (x3*(((((3*x1^3*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^4 + 3*x1^5*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 - a00*x1^3 + b00*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^3 + x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^6 + x1^7 + 3*a00*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 - 3*b00*x1^2*(4*x2^2*x3^2 - (x2^2 - x3^2)^2))*(x1^2*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^4 + 4*x1^3*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^3 - x1^4*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 - a00*x1^2 + b00*x1^2 + a00*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 - b00*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 + 2*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^5 + 2*x1^5*(4*x2^2*x3^2 - (x2^2 - x3^2)^2) - x1^6 + (4*x2^2*x3^2 - (x2^2 - x3^2)^2)^6 - 2*a00*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2) - 2*b00*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)))/(2*(x1^2 + (4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2)^2*(4*x1^2*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^6 + 6*x1^4*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^4 + 4*x1^6*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 - 2*a00*x1^4 - 2*a00*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^4 + a00^2 + b00^2 + x1^8 + (4*x2^2*x3^2 - (x2^2 - x3^2)^2)^8 + 8*b00*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^3 - 8*b00*x1^3*(4*x2^2*x3^2 - (x2^2 - x3^2)^2) + 12*a00*x1^2*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2)) + (2*x2*x3*(x2^2 - x3^2)*(4*x1^3*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^3 + b00*x1^2 - b00*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 + 2*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^5 + 2*x1^5*(4*x2^2*x3^2 - (x2^2 - x3^2)^2) - 2*a00*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2))*(3*x1^2*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^5 + 3*x1^4*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^3 - b00*x1^3 - a00*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^3 + x1^6*(4*x2^2*x3^2 - (x2^2 - x3^2)^2) + (4*x2^2*x3^2 - (x2^2 - x3^2)^2)^7 + 3*a00*x1^2*(4*x2^2*x3^2 - (x2^2 - x3^2)^2) + 3*b00*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2))/((x1^2 + (4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2)^2*(4*x1^2*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^6 + 6*x1^4*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^4 + 4*x1^6*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 - 2*a00*x1^4 - 2*a00*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^4 + a00^2 + b00^2 + x1^8 + (4*x2^2*x3^2 - (x2^2 - x3^2)^2)^8 + 8*b00*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^3 - 8*b00*x1^3*(4*x2^2*x3^2 - (x2^2 - x3^2)^2) + 12*a00*x1^2*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2)))*(x2^2 - x3^2))/(2*(4*x2^2*x3^2 + (x2^2 - x3^2)^2)) - (x2*x3*(((4*x1^3*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^3 + b00*x1^2 - b00*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 + 2*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^5 + 2*x1^5*(4*x2^2*x3^2 - (x2^2 - x3^2)^2) - 2*a00*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2))*(x1^4*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 - x1^2*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^4 + a00*x1^2 - a00*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2 + x1^6 - (4*x2^2*x3^2 - (x2^2 - x3^2)^2)^6 + 2*b00*x1*(4*x2^2*x3^2 - (x2^2 - x3^2)^2)))/(x1^2 + (4*x2^2*x3^2 - (x2^2 - x3^2)^2)^2)^4 - 1))/(4*x2^2*x3^2 + (x2^2 - x3^2)^2)))/(2*(x2^2 + x3^2));

dy=[dy1;dy2;dy3];
end

function varargout = odeRK4(fx,tspan,y0)
    y0 = y0(:);
    nn = length(y0);
    
    h = tspan(2)-tspan(1);
    N = length(tspan);
    t = ones(N,1)*nan;
    y = ones(N,nn)*nan;
    
    t(1) = tspan(1);
    y(1,:) = y0;
    
    for i=1:N
        
        if isnan(y(i,1))
            break
        end
        
        t0 = t(i);
        y0 = transpose(y(i,:));
        
        k1 = fx(t0,y0);
        k2 = fx(t0+h/2,y0+h*k1/2);
        k3 = fx(t0+h/2,y0+h*k2/2);
        k4 = fx(t0+h,y0+h*k3);
        
        y0 = y0+h*(k1+2*k2+2*k3+k4)/6;
        
        t(i+1) = t0+h;
        y(i+1,:) = reshape(y0,1,nn);    
    end
    
    if nargout == 1
        varargout = {y};
    elseif nargout == 2
        varargout = {t,y};
    else
        error('error');
    end

end

